name: lob_migration-release-pipeline

on:
  push:
    branches: [ main ]
env:  
    LAB_FOLDER: guides/microsoft-open-hack-migration  
    ARCHIVE_FOLDER: openhack-assets/archives/releases/microsoft-open-hack-migration  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: 'Setup Node'
        uses: actions/setup-node@v1
        with:
          node-version: 12.x 

      - name: 'Linting OpenHack Content'
        uses: nosborn/github-action-markdown-cli@v1.1.1
        with:
          # configuration file (JSON or YAML)
          config_file: .markdownlint.json
          # files, directories, or globs
          files:  ./portal
          
      - name: 'Linting Resources'
        uses: nosborn/github-action-markdown-cli@v1.1.1
        with:
          # configuration file (JSON or YAML)
          config_file: .markdownlint.json
          # files, directories, or globs
          files:  ./resources

      - name: 'Install dependencies'
        run: npm install jsonlint -g

      - name: 'Execute json linter lab-content-definitions'
        run: |
          jsonlint ./portal/en/lab-content-definition.json
          jsonlint ./portal/zh/lab-content-definition.json

      # Install PanDoc
      - name: Install Pandoc
        run: sudo apt-get install pandoc

      # Setup the output archive environment
      - name: Setup Build Environment
        run: |
          mkdir output  # create output dir
          sudo chmod -R 755 output
          mkdir output/portal
          sudo chmod -R 755 output/portal
          mkdir output/portal/en
          sudo chmod -R 755 output/portal/en
          mkdir output/portal/en/images
          sudo chmod -R 755 output/portal/en/images
          mkdir output/portal/zh
          sudo chmod -R 755 output/portal/zh
          mkdir output/portal/zh/images
          sudo chmod -R 755 output/portal/zh/images
          mkdir output/resources
          sudo chmod -R 755 output/resources
          
      # Create HTML files
      - name: 'Create EN files'
        run: |
          FILE_LIST_EN=$(printf '%s;' ./portal/en/*.md)
          #echo ${FILE_LIST_EN}
          IFS=';' read -ra ENFILES <<< ${FILE_LIST_EN}
          for f in ${ENFILES[@]}; 
          do 
            HTML_FULL_PATH=`basename ${f}`
            #echo ${HTML_FULL_PATH}
            NEW_FILE=${HTML_FULL_PATH/md/html}
            #echo ${NEW_FILE}
            pandoc --from markdown+raw_html --to html5 ./portal/includes.yaml --title "OPEN HACK GUIDE" --no-highlight --output=output/portal/en/${NEW_FILE} ${f}
            cp ${f} output/portal/en/
          done
          
      - name: 'Create ZH files'
        run: |
          # GET ZH files into ZHFILES
          FILE_LIST_ZH=$(printf '%s;' ./portal/zh/*.md)
          IFS=';' read -ra ZHFILES <<< ${FILE_LIST_ZH}
          for f in ${ZHFILES[@]} 
          do 
            HTML_FULL_PATH=`basename ${f}`
            NEW_FILE=${HTML_FULL_PATH/md/html}
            pandoc --from markdown+raw_html --to html5 ./portal/includes.yaml --title "OPEN HACK GUIDE" --no-highlight --output=output/portal/zh/${NEW_FILE} ${f}
            cp ${f} output/portal/zh/
          done

      #Copy Content Definitions
      - name: 'Copy Lab content Definitions'
        run: |
          cp ./portal/en/lab-content-definition.json output/portal/en
          cp ./portal/zh/lab-content-definition.json output/portal/zh
          
      #Copy images
      - name: 'Copy Images'
        run: |
          cp ./portal/en/images/* output/portal/en/images
          cp ./portal/zh/images/* output/portal/zh/images
          
      #Copy resoures
      - name: 'Copy Resources'
        run: |
          cp -r ./resources/* output/resources 

      #Create Archive
      - name: 'create archive'
        uses: actions/upload-artifact@main
        with:
          name: output
          path: output

      - name: Get current time
        uses: srfrnk/current-time@master
        id: current-time
        with:
          format: YYYYMMDD
      
      # Archive Deploy to storage 
      - name: 'Deploy Assets Archive Release'
        env:
          F_TIME: "${{ steps.current-time.outputs.formattedTime }}"
        run: |
          STORAGEARCHIVE="https://${{ secrets.STORAGE_ACCOUNT_NAME }}.blob.core.windows.net/${{ env.ARCHIVE_FOLDER }}/$F_TIME${{ secrets.STORAGE_ACCOUNT_SAS_TOKEN }}"

          #Download and install azcopy 
          pwd 
          wget -O azcopy.tar.gz https://aka.ms/downloadazcopy-v10-linux
          tar -xf azcopy.tar.gz
          rm azcopy.tar.gz

          #Copy the content to azure blob storage
          echo "Copying content to Azure blob storage"

          #Copy the content to azure blob storage
          echo "Copying content to Azure blob storage"

          azcopy copy output $STORAGEARCHIVE  --recursive

          echo "Content copied to Azure blob storage"
          echo $STORAGEARCHIVE

      # Deploy to Production - Release
      - name: 'Deploy Assets Production Release'
        run: |
          DESTINATION="https://${{ secrets.STORAGE_ACCOUNT_NAME_PROD }}.blob.core.windows.net/${{ env.LAB_FOLDER }}${{ secrets.STORAGE_ACCOUNT_SAS_TOKEN_PROD }}"
          DESTINATION2="https://${{ secrets.STORAGE_ACCOUNT_NAME_PROD }}.blob.core.windows.net/${{ env.LAB_FOLDER }}-zh${{ secrets.STORAGE_ACCOUNT_SAS_TOKEN_PROD }}"
          
          #Download and install azcopy 
          pwd 
          wget -O azcopy.tar.gz https://aka.ms/downloadazcopy-v10-linux
          tar -xf azcopy.tar.gz
          rm azcopy.tar.gz

          #Copy the content to azure blob storage
          echo "Copying content to Azure blob storage lab folder"

          azcopy copy 'output/portal/en/*' $DESTINATION --recursive 
          azcopy copy 'output/portal/zh/*' $DESTINATION2 --recursive 

          echo "Content copied to Azure blob storage lab folder"
      
      #Delete Archive
      - name: Delete Output
        uses: geekyeggo/delete-artifact@v1
        with:
          name: output
